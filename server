import express from 'express';

import { getArticles, getArticle, createArticle, deleteArticle } from './methods.js';

const api = express.Router();

api.get('/', getArticles);
api.post('/', createArticle);
api.get('/:id', getArticle);
api.delete('/:id', deleteArticle);

export default api;
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import mongoose from 'mongoose';
import api from './api.js';

const app = express();

app.use(bodyParser.json({  extended: true }))
app.use(bodyParser.urlencoded({  extended: true }))
app.use(cors());
app.use('/api', api);

const CONNECTION_URL = "mongodb+srv://Omarmohamed2013:Omarmohamed2013@cluster0.0ffel.mongodb.net/myFirstDatabase?retryWrites=true&w=majority";
const PORT = process.env.PORT|| 5000;

mongoose.connect(CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => app.listen(PORT, () => console.log(`Server Running on Port: http://localhost:${PORT}`)))
  .catch((error) => console.log(`${error} did not connect`));

mongoose.set('useFindAndModify', false);
import express from 'express';
import mongoose from 'mongoose';
import schema from './schema.js';

const router = express.Router();

export const getArticles = async (req, res) => { 
    try {
        const recipe = await schema.find();
        res.status(200).json(recipe);
        console.log("Get request recieved");
    } catch (err) {
        res.status(404).json({ message: err.message });
    }
}

export const getArticle = async (req, res) => { 
    const { id } = req.params;

    try {
        const recipe = await schema.findById(id);
        
        res.status(200).json(recipe);
    } catch (err) {
        res.status(404).json({ message: err.message });
    }
}

export const createArticle = async (req, res) => {
    const { title, text, selectedFile, creator } = req.body;

    const recipe = new schema({ title, text, selectedFile, creator})

    try {
        await recipe.save();

        res.status(200).json(recipe );
        console.log("Post Request recieved", recipe);
    } catch (err) {
        console.log("Error");
        res.status(404).json({ message: err.message });
    }
}

export const deleteArticle = async (req, res) => {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);

    await schema.findByIdAndRemove(id);

    res.json();
    console.log("Succesful Deletion");
}

export default router;
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "nodemon index.js"
 },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

import mongoose from 'mongoose';

const articleSchema = mongoose.Schema({
    title: String,
    text: String,
    creator: String,
    createdAt: {
        type: Date,
        default: new Date(),
    },
})

var PostArticle = mongoose.model('PostArticle', articleSchema);

export default PostArticle;
